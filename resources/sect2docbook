#!/usr/bin/perl

# sect2docbook file
#   A simple script to convert a .sect file (intended for inclusion
#   in broader documents) into a docbook file.  Addes appropriate
#   entities as well as the appropriate DOCTYPE and xml stuff.

# Grab the name of the file
my $id = $ARGV[0];

# Grab the prefix of the file
my $prefix = $ARGV[0];
$prefix =~ s/.sect//g;

# If there's an entity file associated with this file, create text
# to add it.
my $file_entities = "";
if (-e "$prefix.ent") {
  print STDERR "File exists\n";
  $file_entities = "<!ENTITY % ${prefix}Entities SYSTEM \"$prefix.ent\"> %${prefix}Entities;\n";
}

print STDERR "[$file_entities]\n";

print <<"WRAPPER_TOP";
<?xml version="1.0"?>
<!DOCTYPE section[
  $file_entities
  <!ENTITY % GroupEntities SYSTEM "group.ent">
  %GroupEntities;
  <!ENTITY % CourseEntities SYSTEM "../resources/course.ent">
  %CourseEntities;
  <!ENTITY % ProfEntities SYSTEM "../resources/prof.ent">
  %ProfEntities;
  <!ENTITY % CustomEntities SYSTEM "../resources/custom.ent">
  %CustomEntities;
  <!ENTITY % CommonEntities SYSTEM "../resources/common.ent">
  %CommonEntities;
  <!ENTITY % SubjectEntities SYSTEM "../resources/subjects.ent">
  %SubjectEntities;
  <!ENTITY % CalendarEntities SYSTEM "../resources/calendar.ent">
  %CalendarEntities;
  <!ENTITY % DateEntities SYSTEM "../resources/dates.ent">
  %DateEntities;
]>
WRAPPER_TOP

print readFile("$id.sect");

print <<"WRAPPER_BOTTOM";
WRAPPER_BOTTOM

# +-------------+------------------------------------------------------
# | Subroutines |
# +-------------+

# Read in the contents of  file.
sub readFile
{
  my $filename = shift;
  my $linesep = $/; # Save for later
  undef $/; # When $/ is undefined, read reads the wholefile
  open(TMPFILE, "< $filename");
  my $contents = <TMPFILE>;
  close(TMPFILE);
  $/ = $linesep; # Restore
  return $contents;
} # readFile

