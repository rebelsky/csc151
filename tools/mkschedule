#!/usr/bin/perl

# mkschedule TYPE
#   Creates a schedule of a particular type
#     mtwf-fall: Meets Monday, Tuesday, Wednesday, and Friday in the fall
#     lfa-fall: Learning from Alumni in the Fall (one day per week)
#     mtwf-spring: Meets Monday, Tuesday, Wednesday, and Friday in the spring

# +-----------+-------------------------------------------------------
# | Variables |
# +-----------+

# The current day of the course
my $DAY = 0;

# The current week of the course
my $WEEK = 0;

# +------+------------------------------------------------------------
# | Main |
# +------+

my $type = shift;

if ($type eq "mtwf-fall") {
  top();
  week(); day(); day(); day(); day(); day();
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  break("Fall Break");
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); 
  break("Thanksgiving Break");
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  bottom();
}
elsif ($type eq "mtwf-spring") {
  top();
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  break("Spring Break");
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day();
  week(); day(); day(); day(); day(); 
  week(); day(); day(); day(); day(); 
  bottom();
}
elsif ($type eq "lfa-fall") {
  lfaTop();
  lfaDay(); lfaDay(); lfaDay(); lfaDay();
  lfaDay(); lfaDay(); lfaDay(); lfaDay();
  lfaBreak("Fall Break"); 
  lfaDay(); lfaDay(); lfaDay(); lfaDay();
  lfaBreak("Thanksgiving Break"); 
  lfaDay();
  lfaDay();
  bottom();
} 
else {
  print STDERR "Unknown type of schedule: $type\n";
  print STDERR "   lfa-fall: The Learning from Alumni Fall Course.\n";
  print STDERR "   mtwf-fall: A MTuWF Fall lab class.\n";
  print STDERR "   mtwf-spring: A MTuWF Spring lab class.\n";
  exit 1;
}

# +-------------+-----------------------------------------------------
# | Subroutines |
# +-------------+

# break(txt)
#   Prints a break week
sub break()
{
  my $txt = shift;
  print <<"BREAK";
    <tr class="break">
      <th colspan="6">
        $txt
      </th>
    </tr>
BREAK
}

sub lfaBreak()
{
  my $txt = shift;
  print <<"BREAK";
    <tr class="break">
      <th colspan="4">
        $txt
      </th>
    </tr>
BREAK
} # lfaBreak()

# week()
#   Prints the header for the next week
sub week()
{
  $WEEK++;
  $WEEK = twoDigits($WEEK);
  print<<"WEEK";

    <tr class="week">
      <th colspan="6">
        Week $WEEK: &week$WEEK;
      </th>
    </tr>
WEEK
  headings();
} # week

# day()
#   Prints the next day.
#   Note: Uses global variable $DAY
sub day()
{
  $DAY++;
  $DAY = twoDigits($DAY);
  print<<"DAY";
      <tr>
        <td>$DAY</td>
        <td>&date$DAY;</td>
        <td><ulink url="../outlines/outline.$DAY.html"><emphasis role="strong">&title$DAY;</emphasis></ulink></td>
        <td>&reading$DAY;</td>
        <td>&lab$DAY; <break/><emphasis>&writeup$DAY;</emphasis></td>
        <td>&due$DAY;</td>
      </tr>
DAY
} # day

# lfaDay()
#   Much like day(), but for a Learning from alumni course
sub lfaDay()
{
  $DAY++;
  $DAY = twoDigits($DAY);
  print<<"DAY";
      <tr>
        <td>$DAY</td>
        <td>&date$DAY;</td>
        <td><ulink url="../outlines/outline.$DAY.html"><emphasis role="strong">&title$DAY;</emphasis></ulink></td>
        <td>&leader$DAY;</td>
      </tr>
DAY
} # lfaDay

# twoDigits(n)
#   Print an integer value with two digits.
sub twoDigits(n)
{
  my $val = shift;
  $val = $val + 0;
  if ($val < 10) { return "0$val"; }
  else { return $val; }
}

# headings()
#   Prints the standard headings.
sub headings() 
{
print <<"HEADINGS";
  <thead>
    <tr>
      <th></th>
      <th>Date</th>
      <th>Topic</th>
      <th>Reading</th>
      <th>Lab</th>
      <th>Work Due</th>
    </tr>
  </thead>
HEADINGS
} # headings

# top()
#   Print the text at the top of the page
sub top()
{
  print <<"TOP";
<section id="schedule"><title>Schedule</title>

<para>
  <emphasis>This is an <emphasis type="strong">approximate</emphasis>
  schedule.  Expect dates and topics to change.  (I will try to keep
  due dates the same.)</emphasis>
 </para>

<table class="schedule">
  <tbody>
TOP
} # top

# lfaTop()
#   Print the text at the top of a Learning from Alumni page
sub lfaTop()
{
  print <<"TOP";
<section id="schedule"><title>Schedule</title>

<para>
  <emphasis>This is an <emphasis type="strong">approximate</emphasis>
  schedule.  Expect dates and topics to change.  (I will try to keep
  due dates the same.)</emphasis>
</para>

<table class="schedule">
  <thead>
    <tr>
      <th></th>
      <th>Date</th>
      <th>Visitor</th>
      <th>Host</th>
    </tr>
  </thead>
  <tbody>
TOP
} # lfaTop()

# bottom()
#   Print the text at the bottom of the page
sub bottom()
{
  print <<"BOTTOM";

  </tbody>
</table>

</section> <!-- schedule -->
BOTTOM
} # bottom
