#!/usr/bin/perl

# mkschedule TYPE
#   Creates a schedule of a particular type
#     mtwf-fall: A Monday, Tuesday, Wednesday, and Friday fall lab class.
#     mtwf-fall-writeups: A Monday, Tuesday, Wednesday, and Friday fall 
#       lab class with writeups.
#     mtwf-fall-writeups-review: A Monday, Tuesday, Wednesday, and Friday fall 
#       lab class with writeups and review sessions.
#     lfa-fall: Learning from Alumni in the Fall (one day per week)
#     mtwf-spring: A Monday, Tuesday, Wednesday, and Friday spring lab class.
#     mtwf-spring-mlk, A MWTF spring lab class, with no MLK day
#     th-spring: Meets Thursday in the spring
#     mwf-spring: A MWF spring class (no labs)
#     mwf-spring-notes: A MWF spring class (no labs, note takers)

# +-----------+-------------------------------------------------------
# | Variables |
# +-----------+

# The current day of the course
my $DAY = 0;

# The current week of the course
my $WEEK = 0;

# Are we including note takers
my $NOTETAKERS = 0;

# +------+------------------------------------------------------------
# | Main |
# +------+

my $type = shift;       # The type of schedule
my $i;                  # Everyone's favorite counter variable

# A quick hack to support notes
if ($type =~ s/-notes//) {
  $NOTETAKERS = 1;
}

# Do we include writeups?
my $INCLUDE_WRITEUPS = 0;
if ($type =~ s/-writeups//) {  
  $INCLUDE_WRITEUPS = 1;
}

# Do we include review sessions?  (Needs improvement.)
my $INCLUDE_REVIEW_SESSIONS = 0;
if ($type =~ s/-review//) {
  $INCLUDE_REVIEW_SESSIONS = 1;
}

# Deal with the different kinds of classes
if ($type eq "mtwf-fall") {
  top();
  print "<tbody>\n";
  weeks(1,5,1);   # 1 week of 5 days
  weeks(6,4,1);   # 6 weeks of 4 days
  break("Fall Break", 6);
  weeks(4,4,1);   # 4 weeks of 4 days
  weeks(1,3,1);   # 1 week of 3 days
  break("Thanksgiving Break", 6);
  weeks(2,4,1);   # 2 weeks of 4 days
  print "</tbody>\n";
  bottom();
} # mtwf-fall
elsif ($type eq "mtwf-fall-alt") {
  top();
  print "<thead>\n";
  headings();
  print "<\/thead>\n";
  print "<tbody>\n";
  weeks(1,5,0);   # 1 week of 5 days
  weeks(6,4,0);   # 6 weeks of 4 days
  break("Fall Break", 6);
  weeks(4,4,0);   # 4 weeks of 4 days
  weeks(1,3,0);   # 1 week of 3 days
  break("Thanksgiving Break", 6);
  weeks(2,4,0);   # 2 weeks of 4 days
  print "</tbody>\n";
  bottom();
} # mtwf-spring-alt
elsif ($type eq "mtwf-spring") {
  top();
  print "<tbody>\n";
  weeks(8,4,1);  
  break("Spring Break", 6);
  weeks(6,4,1);   
  print "</tbody>\n";
  bottom();
} # mtwf-spring
elsif ($type eq "mtwf-spring-mlk") {
  top();
  print "<tbody>\n";
  weeks(1,3,1);         # 1 week of 3 days because of MLK
  weeks(7,4,1);         # 7 more weeks of 4 days
  break("Spring Break", 6);
  weeks(6,4,1);   
  print "</tbody>\n";
  bottom();
} # mtwf-spring
elsif ($type eq "mtwf-spring-alt") {
  top();
  print "<thead>\n";
  headings();
  print "<\/thead>\n";
  print "<tbody>\n";
  weeks(8,4,0);
  break("Spring Break", 6);
  weeks(6,4,0);
  print "</tbody>\n";
  bottom();
} # mtwf-spring-alt
elsif ($type eq "th-spring") {
  top();
  print "<thead>\n";
  headings();
  print "</thead>\n";
  print "<tbody>\n";
  days(8);
  break("Spring Break", 6);
  days(6);
  print "</tbody>\n";
  bottom();
} # th-spring
elsif ($type eq "mwf-spring") {
  mwfTop();
  mwfWeeks(8);
  break("Spring Break", 3);
  mwfWeeks(6);
  mwfBottom();
} # mwf-spring
elsif ($type eq "lfa-fall") {
  lfaTop();
  lfaDay(); lfaDay(); lfaDay(); lfaDay();
  lfaDay(); lfaDay(); lfaDay(); lfaDay();
  lfaBreak("Fall Break"); 
  lfaDay(); lfaDay(); lfaDay(); lfaDay();
  lfaBreak("Thanksgiving Break"); 
  lfaDay();
  lfaDay();
  bottom();
} 
else {
  print STDERR "Unknown type of schedule: $type\n";
  print STDERR "   lfa-fall: The Learning from Alumni Fall Course.\n";
  print STDERR "   mtwf-fall: A MTuWF Fall lab class.\n";
  print STDERR "   mtwf-fall-writeups: A MTuWF Fall lab class with writeups.\n";
  print STDERR "   mtwf-spring: A MTuWF Spring lab class.\n";
  print STDERR "   mtwf-spring-mlk-writeups: A MTuWF Spring class with writeups and no class on MLK day.\n";
  print STDERR "   mwf-spring: A MWF Spring class.\n";
  print STDERR "   th-spring: A Thursday-only Spring class.\n";
  exit 1;
}

# +-------------+-----------------------------------------------------
# | Subroutines |
# +-------------+

# break(txt,n)
#   Prints a break week
sub break()
{
  my $txt = shift;
  my $n = shift;
  print <<"BREAK";
    <tr class="break">
      <th colspan="$n">
        $txt
      </th>
    </tr>
BREAK
}

sub lfaBreak()
{
  my $txt = shift;
  print <<"BREAK";
    <tr class="break">
      <th colspan="4">
        $txt
      </th>
    </tr>
BREAK
} # lfaBreak()

# weeks(W,D,H?)
#   Creates W weeks of D days.  Includes the headings if H? is 1.
sub weeks($$$)
{
  my $W = shift;        # Number of weeks
  my $D = shift;        # Number of days
  my $headings = shift; # Do we have headings?
  # Hack!  I assume review sessions are on Thursdays in MTWF classes.
  if ($INCLUDE_REVIEW_SESSIONS) {
    $D -= 1;
  }

  my $w;                # Week counter
  my $d;                # Day counter
  for ($w = 0; $w < $W; $w++) {
    # Generate the title for the week
    week();
    # Generate the headings, if appropriate
    if ($headings) { 
      headings(); 
    }
    # Generate the code for the days.
    for ($d = 0; $d < $D; $d++) {
      day();
    } # for each day
    # Add the review sessions and any extra days
    if ($INCLUDE_REVIEW_SESSIONS) {
      review();
      day();
    }
  } # for
} # weeks

# week()
#   Prints the header for the next week
sub week()
{
  $WEEK++;
  $WEEK = twoDigits($WEEK);
  print<<"WEEK";

    <tr class="week">
      <th colspan="6">
        Week $WEEK: &week$WEEK;
      </th>
    </tr>
WEEK
} # week

# day()
#   Prints the next day.
#   Note: Uses global variable $DAY
sub day()
{
  $DAY++;
  $DAY = twoDigits($DAY);
  if ($INCLUDE_WRITEUPS) {
    $WRITEUP = " <break/><emphasis>&writeup$DAY;</emphasis>"
  }
  else {
    $WRITEUP = "";
  }
  print<<"DAY";
      <tr>
        <td>$DAY</td>
        <td>&date$DAY;</td>
        <td>
          <ulink url="../outlines/outline.$DAY.html"><emphasis role="strong">&title$DAY;</emphasis></ulink>
          <xi:include href="overviews/&abbrev$DAY;.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </td>
        <td>&reading$DAY;</td>
        <td>&lab$DAY;$WRITEUP</td>
        <td>&due$DAY;</td>
      </tr>
DAY
} # day

sub review()
{
  print<<"REVIEW";
      <tr>
        <td></td>
        <td>&thu$WEEK;</td>
        <td>
          <emphasis role="strong"><emphasis><ulink url="../eboards/extra.$WEEK.html">Optional Review Session</ulink></emphasis></emphasis>
        </td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
REVIEW
}

# days(N)
#   Print N days
sub days($) 
{
  my $D = shift;
  my $d;
  for ($d = 0; $d < $D; $d++) {
    day();
  } # for
} # days

# lfaDay()
#   Much like day(), but for a Learning from alumni course
sub lfaDay()
{
  $DAY++;
  $DAY = twoDigits($DAY);
  print<<"DAY";
      <tr>
        <td>$DAY</td>
        <td>&date$DAY;</td>
        <td><ulink url="../outlines/outline.$DAY.html"><emphasis role="strong">&title$DAY;</emphasis></ulink></td>
        <td>&leader$DAY;</td>
      </tr>
DAY
} # lfaDay

# twoDigits(n)
#   Print an integer value with two digits.
sub twoDigits($)
{
  my $val = shift;
  $val = $val + 0;
  if ($val < 10) { return "0$val"; }
  else { return $val; }
}

# headings()
#   Prints the mwf headings.
sub headings() 
{
print <<"HEADINGS";
  <tr>
    <th></th>
    <th>Date</th>
    <th width="35%">Topic</th>
    <th width="20%">Reading</th>
    <th width="20%">Lab</th>
    <th>Work Due</th>
  </tr>
HEADINGS
} # headings

# top()
#   Print the text at the top of the page
sub top()
{
  print <<"TOP";
<section id="schedule"><title>Schedule</title>

<!-- This page generated automatically.  Please do not edit by hand. -->

<para>
  <emphasis>This is an <emphasis type="strong">approximate</emphasis>
  schedule.  Expect topics and dates of topics to change.  (I will try 
  to keep due dates of assignments the same.)</emphasis>
</para>

<!--
<para>
  Some of the information here can also be found in
  <ulink url="&gcal;">the Google calendar for the course</ulink>, which
  is available at &lt;<ulink url="&gcal;"/>&gt;.
</para>
-->

<table class="schedule">
TOP
} # top

# lfaTop()
#   Print the text at the top of a Learning from Alumni page
sub lfaTop()
{
  print <<"TOP";
<section id="schedule"><title>Schedule</title>

<para>
  <emphasis>This is an <emphasis type="strong">approximate</emphasis>
  schedule.  Expect dates and topics to change.  (I will try to keep
  due dates the same.)</emphasis>
</para>

<table class="schedule">
  <thead>
    <tr>
      <th></th>
      <th>Date</th>
      <th>Visitor</th>
      <th>Host</th>
    </tr>
  </thead>
  <tbody>
TOP
} # lfaTop()

# bottom()
#   Print the text at the bottom of the page
sub bottom()
{
  print <<"BOTTOM";
</table>

</section> <!-- schedule -->
BOTTOM
} # bottom

# +---------------------+---------------------------------------------
# | Fun with MWF clases |
# +---------------------+

# mwfTop()
#   Print the text at the top of MWF class
sub mwfTop()
{
  print <<"TOP";
<section id="schedule"><title>Schedule</title>

<para>
  <emphasis>This is an <emphasis type="strong">approximate</emphasis>
  schedule.  Expect dates and topics to change.  (I will try to keep
  due dates the same.)</emphasis>
</para>

<para>
  Some of the information here can also be found in
  <ulink url="&gcal;">the Google calendar for the course</ulink>, which
  is available at &lt;<ulink url="&gcal;"/>&gt;.
</para>

<table class="schedule">
  <thead>
    <tr>
      <th width="33%">Monday</th>
      <th width="33%">Wednesday</th>
      <th width="33%">Friday</th>
    </tr>
  </thead>
  <tbody>
TOP
} # mwfTop()

# mwfBottom()
#   Print the text at the bottom of the page
sub mwfBottom()
{
  print <<"BOTTOM";
    </tbody>
</table>

</section> <!-- schedule -->
BOTTOM
} # mwfBottom

# mwfDay()
#   Prints the next day in a MWF class.
#   Note: Uses global variable $DAY
sub mwfDay()
{
  $DAY++;
  $DAY = twoDigits($DAY);
  print<<"DAY_PART_1";
      <td>
        ($DAY)
        &date$DAY;
        <daytitle>
          <ulink url="../outlines/outline.$DAY.html"><emphasis role="strong">&title$DAY;</emphasis></ulink>
        </daytitle>
DAY_PART_1
  
  if ($NOTETAKERS) {
    print "        &notetakers$DAY;\n";
  }

  print<<"DAY_PART_2";
        <xi:include href="overviews/&abbrev$DAY;.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      </td>
DAY_PART_2
} # mwfDay()

# mwfWeek()
#   Prints the header for one week of a MWF class.
sub mwfWeek()
{
  $WEEK++;
  $WEEK = twoDigits($WEEK);
  print<<"WEEK";

    <tr class="week">
      <th colspan="3">
        Week $WEEK: &week$WEEK;
      </th>
    </tr>
WEEK
} # mwfWeek

# mwfWeeks(N)
#   Print N weeks of class
sub mwfWeeks($)
{
  my $n = shift;
  my $i;
  for ($i = 0; $i < $n; $i++) {
    mwfWeek();
    print "    <tr>\n";
    mwfDay();
    mwfDay();
    mwfDay();
    print "    </tr>\n";
  } # for
} # mwfWeeks

# mwfWeekF()
#   Print a mwfWeek that has only Friday.  Typically used for the
#   first week of fall courses.
sub mwfWeekF()
{
  mwfWeek();
  print "    <tr>\n";
  print "      <td></td>\n";
  print "      <td></td>\n";
  mwfDay();
  print "    </tr>\n";
} # mwfWeekF

# mwfWeekMW()
#   Print a mwfWeek that has no Friday.  Typically used for Thanksgiving
#   break.
sub mwfWeekF()
{
  mwfWeek();
  print "    <tr>\n";
  mwfDay();
  mwfDay();
  print "      <td></td>\n";
  print "    </tr>\n";
} # mwfWeekF
