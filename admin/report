#!/usr/bin/perl

# A quick hack for grading a student using current criteria.

# +----------+--------------------------------------------------------
# | Settings |
# +----------+

# Do we want detailed output?  (Usually, the answer is yes.  I should
# also take this from the command line.)
my $DETAILED = 1;

# +--------+----------------------------------------------------------
# | "Main" |
# +--------+

my $email = $ARGV[1];
my $fullname = $ARGV[0];

print <<"HEAD";
Estimated Grade Report for $fullname [$email]

This is an experimental grade report and is not guaranteed to be accurate.
Estimated grades are based on current status in the course.  Final grades
may therefore be different.

HEAD

# Percentages
my $participation_percent = " 5";
my $hw_percent = 10;
my $lab_percent = 10;
my $quiz_percent = 10;
my $project_percent = 10;
my $exam_percent = 45;
my $individual_percent = " 5";
my $group_percent = " 5";

# Info on the exams
my $examcount = 0;
my $examtotal = 0;
my $exams = 0;
my $final = 0;
my $finalnum = 0;
my $exammin = 100;
my @exams;

# Info on labs
my $labtotal = 0;
my $labcount = 0;
my $labs = 0;
my @labs;

# Info on homework
my $hwcount = 0;
my $hwtotal = 0;
my $homework = 0;
my $hwfour;        # Homework on a four point scale.
my @homework;

# Info on quizzes
my $quizcount = 0;
my $quiztotal = 0;
my $quizmin = 10;       # Minimum quiz grade
my $quizzes;
my @quizzes;

# Other grade categories
my $participation = 0; 
my $project = 0;
my $extra = 0;
my @extra;
my $notes = "";

# Synthesized information
my $besthlq = 0;        # Best of homework, labs, quizzes
my $bestpef = 0;        # Best of project, exams, final
my $total = 0;          # Total of available grades
my $possible = 0;       # Total possible

# Other info
my $partinfo = "";

# Process all of the lines
open(GRADES, "grep $email grades | ");
while ($line = <GRADES>) {
  chomp($line);
  # @parts = split /\W+/, $line, 4;     # Problems with ( for some reason
  @parts = split /[ \t]+/, $line, 4;
  if (! ($parts[0] eq $email)) {
   print "[Error processing grades.  Results likely to be bad.]\n\n";
  }
  $category = $parts[1];
  $grade = $parts[2];
  $info = $parts[3];
  # print stderr "CATEGORY: $category, GRADE: $grade, INFO: $info\n";

  if ($category =~ m/^notes/) {
    $notes = "$notes$info\n";
  } # notes
  elsif ($category =~ m/^lab/) {
    push @labs, "$category\t$grade\t$info";
    if ((!ignore($grade))) {
      $labtotal += $grade;
      $labcount += 1;
    }
  } # lab
  elsif ($category =~ m/^quiz/) {
    push @quizzes, "$category\t$grade\t$info";
    if (!ignore($grade)) {
      $quiztotal += $grade;
      $quizcount += 1;
      if ($grade < $quizmin) {
        $quizmin = $grade;
      } # if
    } # if a real grade
  } # quiz
  elsif ($category =~ m/^hw/) {
    push @homework, "$category\t$grade\t$info";
    if (!ignore($grade)) {
      my $tmp = convertCategoryGrade($grade);
      if ($tmp < 0) {
        print STDERR "Invalid grade on $category: $grade\n";
        print "[Error processing grade ($category/$grade).  Results likely to be bad.]\n\n";
      }
      $hwtotal += $tmp;
      $hwcount += 1;
    } # if (!ignore($grade))
  } # homework
  elsif (($category =~ m/^exam/) || ($category =~ m/^final/)) {
    push @exams, "$category\t$grade\t$info";
    if (!ignore($grade)) {
      $numgrade = convertLetterGrade($grade);
      $examtotal += $numgrade;
      $examcount += 1;
      if ($numgrade < $exammin) { $exammin = $numgrade; }
      if ($category =~ /^final/) { 
        $final = $grade;
        $finalnum = $numgrade;
      }
    } # if ((!ignore($grade)))
  } # exam
  elsif ($category =~ m/^ec/) {
    push @extra, "$grade\t$info";
    $extra += $grade;
  } # extra credit
  elsif ($category =~ m/^part/) {
    if (!ignore($grade)) {
      $participation = $grade;
      $partinfo = $info;
    } # if (!ignore($grade))
  } # participation
  elsif ($category =~ m/^prop/) {
    if (!ignore($grade)) {
      $project += $grade;
    } # if (!ignore($grade))
  } # proposal
  elsif ($category =~ m/^proj/) {
    if (!ignore($grade)) {
      $project += $grade;
    } # if (!ignore($grade))
  } # project
  elsif ($category =~ m/^numgrade/) {
    # Skip
  } # numeric grade
  elsif ($category =~ m/^letgrade/) {
    # Skip
  } # letter grade
  elsif ($category =~ m/^absence/) {
    # Skip
  } # absence
  else {
    print STDERR "Invalid category: $category\n";
    print "[Error processing grade ($category/$grade).  Results likely to be bad.]\n\n";
  } # unknown
} # while
close(GRADES);

if ($notes) {
   print "ADDITIONAL NOTES\n";
   print "----------------\n";
   print "\n";
   print "$notes\n";
}

print "SUMMARY REPORT\n";
print "--------------\n";
print "\n";

print "Homework ......... ($hw_percent%): ";
if ($hwcount == 0) {
  print "[Not available]\n";
} else {
  $hwfour = round1($hwtotal/$hwcount);
  $homework = 55 + 10*$hwfour;
  print "$homework ($hwfour on a 4-point scale)\n";
  $total += $homework * $hw_percent/100;
  $possible += $hw_percent;
}

print "Labs ............. ($lab_percent%): ";
if ($labcount == 0) {
  print "[Not available]\n";
} else {
  $labs = min(100, round1(100*(5+$labtotal)/$labcount));
  print "$labs ($labtotal/$labcount)\n";
  $total += $labs * $lab_percent/100;
  $possible += $lab_percent;
}

print "Quizzes .......... ($quiz_percent%): ";
if ($quizcount == 0) {
  print "[Not available]\n";
} else {
  if ($quizcount == 1) {
     $quizzes = $quiztotal;
  } else {
    $quizzes = round1(10 * ($quiztotal-$quizmin)/($quizcount-1));
  }
  my $tmp = ($quizcount-1);
  print "$quizzes ((total=$quiztotal-min=$quizmin)/$tmp)\n";
  $total += $quizzes * $quiz_percent/100;
  $possible += $quiz_percent;
}

print "Project .......... ($project_percent%): ";
if ($project == 0) {
  print "[Not available]\n";
} else {
  print "$project\n";
  $total += $project * $project_percent/100;
  $possible += $project_percent;
} 

print "Exams ............ ($exam_percent%): ";
if ($examcount == 0) {
  print "[Not available]\n";
} 
else {
  if ($examcount == 4) {
    $exams = round1(($examtotal-$exammin)/3);
  }
  else {
    $exams = round1($examtotal/$examcount);
  }
  print "$exams\n";
  $total += $exams * $exam_percent/100;
  $possible += $exam_percent;
}

print "Final ..................: ";
if ($final) {
  print "$final\n";
}
else {
  print "[Not available]\n";
}

print "Best individual .. ($individual_percent%): ";
$bestindividual = max(max($quizzes, $exams), $final);
if ($bestindividual == 0) {
  print "[Not available]\n";
}
else {
  print "$bestindividual\n";
  $total += $bestindividual * $individual_percent/100;
  $possible += $individual_percent;
}

print "Best group ....... ($group_percent%): ";
$bestgroup = max(max($homework, $labs), $project);
if ($bestgroup == 0) {
  print "[Not available]\n";
}
else {
  print "$bestgroup\n";
  $total += $bestgroup * $group_percent/100;
  $possible += $group_percent;
}

print "Participation .... ($participation_percent%): ";
if ($participation == 0) {
  print "[Not available]\n";
}
else {
  print "$participation\n";
  $total += $participation * $participation_percent/100;
  $possible += $participation_percent;
}

print "Extra Credit ...........: $extra units\n";

print "\n";
my $est;
my $adjusted;

if ($possible != 0) {
  my $total = round1($total);
  my $est = round1(100 * $total/$possible);
  my $adjusted = round1($est + $extra/4);
  print "Estimated numeric grade: $total/$possible  = $est\n";
  print "Estimated numeric grade with extra credit: $adjusted\n";
  print "\n";
} # if there are some possible grades

if ($DETAILED) {
  print "DETAILED INFORMATION\n";
  print "--------------------\n";
  print "\n";
  
  print "Homework: $homework\n";
  for $tmp (@homework) {
    print "\t$tmp\n";
  } # for
  print "\n";
  
  print "Labs: $labs ($labtotal/$labcount)\n";
  for $tmp (@labs) {
    print "\t$tmp\n";
  } # for
  print "\n";
  
  $tmp = $quizcount-1;
  print "Quizzes: $quizzes ((total=$quiztotal-min=$quizmin)/$tmp)\n";
  for $tmp (@quizzes) {
    print "\t$tmp\n";
  } # for
  print "\n";
  
  print "Exams: $exams\n";
  for $tmp (@exams) {
    print "\t$tmp\n";
  } # for
  print "\n";
 
  if ($partinfo) {
    print "Participation (include attendance)\n";
    print "\t$participation\t$partinfo\n\n";
  }

  print "Extra: $extra\n";
  for $tmp (@extra) {
    print "\t$tmp\n";
  } # for
  print "\n";
} # if ($DETAILED)

# +-------------+-----------------------------------------------------
# | Subroutines |
# +-------------+

sub convertCategoryGrade($) {
  my $grade = shift;
  if ($grade eq "check") {
    return 3;
  }
  elsif ($grade eq "check+") {
    return 5;
  }
  elsif ($grade eq "check++") {
    return 5.5;
  }
  elsif ($grade eq "check-") {
    return 2;
  }
  elsif ($grade eq "plus") {
    return 6;
  } 
  elsif ($grade eq "minus") {
    return 1;
  }
  elsif (($grade eq "zero") || ($grade eq "0")) {
    return 0;
  }
  elsif ($grade eq "good") {
    return 3;
  }
  elsif ($grade eq "vg") {
    return 4.5;
  }
  elsif ($grade eq "excellent") {
    return 5.5;
  }
  elsif ($grade eq "fair") {
    return 2;
  }
  elsif ($grade eq "poor") {
    return 1;
  }
  else {
    return -1;
  }
} # convertCategoryGrade

sub convertLetterGrade($) {
  # A quick mapping of letter grades to letters
  %letters = ("A+", 100, "A", 96, "A-", 92, "A-/B+", 90, "A/B", 90,
              "B+", 88, "B", 86, "B-", 82, "B-/C+", 80, "B/C", 80,
              "C+", 78, "C", 76, "C-", 72, "C-/D+", 70, "C/D", 70,
              "D+", 68, "D", 66, "D-", 62,
              "F", 55,
              "0", 0, "Zero", 0, "zero", 0);

  my $grade = shift;
  if (($grade eq "0") || ($grade eq "zero") || ($grade eq "Zero")) {
    return 0;
  }
  my $num = $letters{$grade};
  if ($num) {
    return $num;
  }
  elsif ($grade =~ /[0-9][0-9]*/) {
    return $grade;
  }
  else {
    return -1;
  }
} # convertLetterGrade

sub max($$) {
  my $x = shift;
  my $y = shift;
  if ($x > $y) {
    return $x;
  }
  else {
    return $y;
  }
} # max

sub min($$) {
  my $x = shift;
  my $y = shift;
  if ($x < $y) {
    return $x;
  }
  else {
    return $y;
  }
} # min

sub round1($) {
  my $val = shift;
  return sprintf ("%.1f", $val);
} # round1

sub round2($) {
  my $val = shift;
  return sprintf ("%.2f", $val);
} # round2

sub ignore($) {
  my $val = shift;
  return (($val eq "x") || ($val eq "_"));
}
